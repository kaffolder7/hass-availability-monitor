## 
# Multiple Notifications
# 
# This scenario simulates consecutive API failures and recoveries to verify that notifications are sent for each distinct event (e.g., “down” and “recovery”) without duplication.
# 
# Mock API Setup:
#   Create a Python mock server with alternating responses to simulate failures and recoveries:
#     ```
#     python3 -m http.server 8000 &
#     echo -e "HTTP/1.1 500 Internal Server Error\r\nContent-Type: text/plain\r\n\r\n" > error_response.txt
#     echo -e "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n" > success_response.txt
#     while true; do
#       cat error_response.txt | nc -l 8000 -q 1
#       sleep 10
#       cat success_response.txt | nc -l 8000 -q 1
#       sleep 10
#     done
#     ```
# 
# Expected Behavior:
#   - The script logs multiple “down” and “recovery” events.
#   - Notifications are sent for each state transition (failure to recovery and vice versa).
# 
# Test command:
# `../check_endpoint.sh > multiple_notifications.log 2>&1`
# 
# Verify:
#   1. Logs show alternating failures and recoveries:
#     `grep -E "API endpoint is unavailable|API endpoint is now available" multiple_notifications.log`
#   2. Notifications are logged:
#     `grep -E "Sending SMS.*API is down|Sending SMS.*API has recovered" multiple_notifications.log`
# 
HASS_API_URL="http://localhost:8000"
HASS_AUTH_TOKEN="dummy_token"
SMS_TO="+1234567890"
SMS_FROM="sender@example.com"
ENDPOINT_DOWN_MESSAGE="API is down."
ENDPOINT_UP_MESSAGE="API has recovered."
RETRY_COUNT=2
RETRY_INTERVAL=3
CHECK_INTERVAL=5